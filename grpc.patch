diff --git a/CMakeLists.txt b/CMakeLists.txt
index f58ee19..b4b42e0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -30,6 +30,9 @@ set(PACKAGE_TARNAME   "${PACKAGE_NAME}-${PACKAGE_VERSION}")
 set(PACKAGE_BUGREPORT "https://github.com/grpc/grpc/issues/")
 project(${PACKAGE_NAME} C CXX)

+include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
+conan_basic_setup(TARGETS)
+
 set(gRPC_INSTALL_BINDIR "bin" CACHE STRING "Installation directory for executables")
 set(gRPC_INSTALL_LIBDIR "lib" CACHE STRING "Installation directory for libraries")
 set(gRPC_INSTALL_INCLUDEDIR "include" CACHE STRING "Installation directory for headers")
@@ -16108,3 +16111,7 @@ foreach(_config gRPCConfig gRPCConfigVersion)
     DESTINATION ${gRPC_INSTALL_CMAKEDIR}
   )
 endforeach()
+
+install(FILES cmake/gRPCFunctions.cmake
+  DESTINATION ${gRPC_INSTALL_CMAKEDIR}
+)
diff --git a/cmake/gRPCConfig.cmake.in b/cmake/gRPCConfig.cmake.in
index 1a0fa6a..50cfb32 100644
--- a/cmake/gRPCConfig.cmake.in
+++ b/cmake/gRPCConfig.cmake.in
@@ -1,8 +1,11 @@
-# Depend packages
-@_gRPC_FIND_ZLIB@
-@_gRPC_FIND_PROTOBUF@
-@_gRPC_FIND_SSL@
-@_gRPC_FIND_CARES@
-
-# Targets
-include(${CMAKE_CURRENT_LIST_DIR}/gRPCTargets.cmake)
+# Depend packages
+@_gRPC_FIND_ZLIB@
+@_gRPC_FIND_PROTOBUF@
+@_gRPC_FIND_SSL@
+@_gRPC_FIND_CARES@
+
+# Targets
+include(${CMAKE_CURRENT_LIST_DIR}/gRPCTargets.cmake)
+
+# Functions
+include(${CMAKE_CURRENT_LIST_DIR}/gRPCFunctions.cmake)
diff --git a/cmake/gRPCFunctions.cmake b/cmake/gRPCFunctions.cmake
new file mode 100644
index 0000000..716a28d
--- /dev/null
+++ b/cmake/gRPCFunctions.cmake
@@ -0,0 +1,126 @@
+
+function(grpc_generate_cpp SRCS HDRS)
+  cmake_parse_arguments(grpc "" "" "" ${ARGN})
+
+  set(PROTO_FILES "${grpc_UNPARSED_ARGUMENTS}")
+  if(NOT PROTO_FILES)
+    message(SEND_ERROR "Error: grpc_generate_cpp() called without any proto files")
+    return()
+  endif()
+
+  if(grpc_generate_cpp_APPEND_PATH)
+    # Create an include path for each file specified
+    foreach(FIL ${PROTO_FILES})
+      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
+      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
+      list(FIND _grpc_include_path ${ABS_PATH} _contains_already)
+      if(${_contains_already} EQUAL -1)
+        list(APPEND _grpc_include_path -I ${ABS_PATH})
+      endif()
+    endforeach()
+  else()
+    set(_grpc_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
+  endif()
+
+  if(DEFINED GRPC_IMPORT_DIRS)
+    foreach(DIR ${GRPC_IMPORT_DIRS})
+      get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
+      list(FIND _grpc_include_path ${ABS_PATH} _contains_already)
+      if(${_contains_already} EQUAL -1)
+        list(APPEND _grpc_include_path -I ${ABS_PATH})
+      endif()
+    endforeach()
+  endif()
+
+  set(${SRCS})
+  set(${HDRS})
+  foreach(_proto ${PROTO_FILES})
+    get_filename_component(_abs_file ${_proto} ABSOLUTE)
+    get_filename_component(_abs_dir ${_abs_file} DIRECTORY)
+    get_filename_component(_basename ${_proto} NAME_WE)
+    file(RELATIVE_PATH _rel_dir ${CMAKE_CURRENT_SOURCE_DIR} ${_abs_dir})
+
+    list(APPEND ${SRCS} "${CMAKE_CURRENT_BINARY_DIR}/${_basename}.grpc.pb.cc")
+    list(APPEND ${HDRS} "${CMAKE_CURRENT_BINARY_DIR}/${_basename}.grpc.pb.h")
+
+    message("SRCS = ${${SRCS}}")
+    add_custom_command(
+      OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${_basename}.grpc.pb.cc"
+             "${CMAKE_CURRENT_BINARY_DIR}/${_basename}.grpc.pb.h"
+      COMMAND protobuf::protoc
+      ARGS --grpc_out=${CMAKE_CURRENT_BINARY_DIR}
+           --plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>
+           ${_grpc_include_path}
+           ${_abs_file}
+      DEPENDS ${_abs_file} protobuf::protoc gRPC::grpc_cpp_plugin
+      COMMENT "Running C++ gRPC compiler on ${_proto}"
+      VERBATIM
+    )
+  endforeach()
+
+  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
+  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
+  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
+endfunction()
+
+function(grpc_generate_python SRCS)
+  include(CMakeFindDependencyMacro)
+  find_dependency(PythonInterp 3)
+
+  cmake_parse_arguments(grpc "" "" "" ${ARGN})
+
+  set(PROTO_FILES "${grpc_UNPARSED_ARGUMENTS}")
+  if(NOT PROTO_FILES)
+    message(SEND_ERROR "Error: grpc_generate_python() called without any proto files")
+    return()
+  endif()
+
+  if(grpc_generate_python_APPEND_PATH)
+    # Create an include path for each file specified
+    foreach(FIL ${PROTO_FILES})
+    get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
+    get_filename_component(ABS_PATH ${ABS_FIL} PATH)
+    list(FIND _grpc_include_path ${ABS_PATH} _contains_already)
+    if(${_contains_already} EQUAL -1)
+        list(APPEND _grpc_include_path -I ${ABS_PATH})
+    endif()
+    endforeach()
+  else()
+    set(_grpc_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
+  endif()
+
+  if(DEFINED GRPC_IMPORT_DIRS)
+    foreach(DIR ${GRPC_IMPORT_DIRS})
+    get_filename_component(ABS_PATH ${DIR} ABSOLUTE)
+    list(FIND _grpc_include_path ${ABS_PATH} _contains_already)
+    if(${_contains_already} EQUAL -1)
+      list(APPEND _grpc_include_path -I ${ABS_PATH})
+    endif()
+    endforeach()
+  endif()
+
+  set(${SRCS})
+  foreach(_proto ${PROTO_FILES})
+    get_filename_component(_abs_file ${_proto} ABSOLUTE)
+    get_filename_component(_abs_dir ${_abs_file} DIRECTORY)
+    get_filename_component(_basename ${_proto} NAME_WE)
+    file(RELATIVE_PATH _rel_dir ${CMAKE_CURRENT_SOURCE_DIR} ${_abs_dir})
+
+    list(APPEND ${SRCS} "${CMAKE_CURRENT_BINARY_DIR}/${_basename}_pb2_grpc.py")
+
+    add_custom_command(
+      OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${_basename}_pb2_grpc.py"
+      COMMAND ${PYTHON_EXECUTABLE}
+      ARGS "-m" "grpc_tools.protoc"
+           "--grpc_python_out=${CMAKE_CURRENT_BINARY_DIR}"
+           ${_grpc_include_path}
+           ${_abs_file}
+      DEPENDS ${_abs_file} ${PYTHON_EXECUTABLE}
+      COMMENT "Running Python grpc compiler on ${_proto}"
+      VERBATIM
+    )
+  endforeach()
+
+  set_source_files_properties(${${SRCS}} PROPERTIES GENERATED TRUE)
+  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
+endfunction()
